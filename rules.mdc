---
description:
globs:
alwaysApply: false
---
해당 원칙을 반드시 따라주세요

1. 절대 원칙
   
- 로직 망가트리지 않기 : 로직 변경 요구 없이 로직을 망가트리지 마세요
- 테스트 통과 : 리팩토링 후 테스트에 통과가 반드시 되어야 합니다.
- 파일별 단위테스트 : 파일 작성 후 src/tests의 하위에 테스트를 반드시 함수 모두 되게 작성하세요
ex) decoder_test.ts 로 decoder.ts의 모든 단위함수 테스트 구현
- 함수명은 한글로 작성 : 함수명은 한글로 어떤 테스트인지 확실히 표현

1. 일반 원칙

- 코드는 항상 읽기 쉽고 이해하기 쉬워야 합니다
- DRY (Don't Repeat Yourself) 원칙을 따릅니다
- KISS (Keep It Simple, Stupid) 원칙을 적용합니다
- 함수와 클래스는 단일 책임 원칙(Single Responsibility Principle)을 따릅니다

네이밍 규칙

변수명과 함수명은 의미가 명확해야 합니다
불필요한 주석 대신 self-documenting code를 작성합니다

함수 리팩토링
함수는 한 가지 일만 수행해야 합니다
함수 길이는 20-30줄을 넘지 않도록 합니다
매개변수는 3개 이하로 제한합니다
복잡한 조건문은 별도의 함수로 추출합니다
중첩된 if문은 early return으로 개선합니다

코드 구조
관련 있는 코드끼리 그룹화합니다
적절한 공백과 들여쓰기를 사용합니다
매직 넘버는 상수로 정의합니다
복잡한 로직은 여러 단계로 분리합니다

에러 처리
예외 처리를 명확히 합니다
에러 메시지는 구체적이고 도움이 되도록 작성합니다
try-catch 블록을 적절히 사용합니다

코드 정리 시 우선순위
중복 코드 제거
복잡한 조건문 단순화
긴 함수 분리
변수명/함수명 개선
불필요한 주석 제거
코드 포맷팅 일관성 유지

금지 사항
- 불필요한 복잡성 추가
- 원본 코드의 의도 변경
- 테스트 없이 대규모 변경
- 그리고 반드시 리팩토링이 끝난 후 다음 체크리스트를 확인할 것

리팩토링 후 체크리스트
- 코드가 더 읽기 쉬워졌는가?
- 중복이 제거되었는가?
- 함수들이 단일 책임을 가지는가?
- 변수명이 명확한가?
- 테스트가 여전히 통과하는가?

테스트 작성
- 테스트는 깔끔한 단위테스트, 파일 통합테스트, 전체 통합테스트를 사용합니다