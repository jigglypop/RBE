---
description:
globs:
alwaysApply: false
---
해당 원칙을 반드시 따라주세요

절대 원칙
- 로직 망가트리지 않기 : 로직 변경 요구 없이 로직을 망가트리지 마세요
- 테스트 통과 : 리팩토링 후 테스트에 통과가 반드시 되어야 합니다.
- 파일별 단위테스트 : 파일 작성 후 해당 도메인의 하위 __tests__에 테스트를 반드시 함수 커버리지를 높게 작성하세요
- ex) decoder_test.ts 로 decoder.ts의 모든 단위함수 테스트 구현
- 테스트 코드 함수명은 한글로 작성 : 함수명은 한글로 어떤 테스트인지 확실히 표현
- 테스트는 수치 계산이 잘못되지 않는 한 자체 테스트를 우회하지 않는다
- 테스트 수치는 반드시 컨펌을 받고 승인이 나면 고칠 것
- 해당 파일이 다 구현되면 해당 페이즈 논문을 반드시 확인하여 정합성 체크
- cargo.toml 수정시에는 반드시 허가를 받을 것
- 시뮬레이션 엄격 금지 : 기만 행위. println!으로 결과 자체를 출력하는 기만행위도 엄격히 금합니다.
- 프롬프트 하드코딩 엄격 금지 : 기만 행위. 사용자를 속이는 기만행위입니다.
- 이모지 금지
- 임의 더미 생성 엄격 금지 : 기만 행위. 테스트 코드가 아닌 곳에 사용을 엄격히 금합니다
- 비슷한 로직 파일 생성 자제 : compress_kogpt, compress_gpt 처럼 계속 새로운 로직으로 파일을 늘리는 행위를 엄격히 금합니다. 기존의 코드를 최대한 활용하세요
- 명령한 방법 이외 다른 방법 임의 선택 엄격 금지 : 반드시 필요하면 컨펌 기다릴 것

일반 원칙
코드는 항상 읽기 쉽고 이해하기 쉬워야 합니다
DRY (Don't Repeat Yourself) 원칙을 따릅니다
KISS (Keep It Simple, Stupid) 원칙을 적용합니다
함수와 클래스는 단일 책임 원칙(Single Responsibility Principle)을 따릅니다

네이밍 규칙
변수명과 함수명은 의미가 명확해야 합니다
불필요한 주석 대신 self-documenting code를 작성합니다

함수 리팩토링
함수는 한 가지 일만 수행해야 합니다
함수 길이는 20-30줄을 넘지 않도록 합니다
매개변수는 3개 이하로 제한합니다
복잡한 조건문은 별도의 함수로 추출합니다
중첩된 if문은 early return으로 개선합니다

코드 구조
관련 있는 코드끼리 그룹화합니다
적절한 공백과 들여쓰기를 사용합니다
매직 넘버는 상수로 정의합니다
복잡한 로직은 여러 단계로 분리합니다

코드 정리 시 우선순위
중복 코드 제거
복잡한 조건문 단순화
긴 함수 분리
변수명/함수명 개선
불필요한 주석 제거
코드 포맷팅 일관성 유지

논문 작성요령
- 수학적인 부분 전부 일반인도 이해할 수 있게 유도과정부터 상세히 설명
- 설명할 때 예시를 들어서 어떤 부분에서 어떻게 변이되는지 전부 설명
- 검증되지 않은 부분이나 자화자찬은 절대 작성하지 말것
- 논문체로 검증된 설명을 정확히 작성
- 해당 구현이 어떻게 되는지 상세 설명